import config
#import requests
#import json
import time
import telebot
import random
#import base64
from telebot import types
#import smtplib
import pandas as pd
from telebot import types
from datetime import date
import re

v_phone = ''
v_lastname = ''
v_firstname = ''
v_step = ''

NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")


bot = telebot.TeleBot(config.token)
users = [230946227]
hideBoard = types.ReplyKeyboardRemove()

file1 = '/usr/src/app/dockerdata/contact.xlsx'
xlsx = pd.ExcelFile(file1)
df1 = xlsx.parse('contact')

#file2 = '/usr/src/app/dockerdata/salarycalendar.xlsx'
#xlsx2 = pd.ExcelFile(file2)
#df2 = xlsx2.parse('calendar')


    

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
def userid_list():
    dff = pd.read_csv("/usr/src/app/dockerdata/ids.log", sep=";", header=0)
    dff = dff['ID']
    dff = dff.tolist()
    return dff
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# help
# function to handle the /help command
@bot.message_handler(commands=['help'], func=lambda message: message.from_user.id in userid_list())
def fn_main_help(message):
    print('6' + ' | message.from_user.id = ' + str(message.from_user.id) + ' | message.chat.id = ' + str(message.chat.id) + ' | message.text = ' + str(message.text))
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    
    bot.send_message(message.chat.id, '–Ø —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ï—Å–ª–∏ —Ç—ã —É–≤–∏–¥–µ—à—å –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', reply_markup=hideBoard)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# start
# function to handle the /start command
@bot.message_handler(commands=['start'])
def fn_main_start(message):
    print('10' + ' | message.from_user.id = ' + str(message.from_user.id) + ' | message.chat.id = ' + str(message.chat.id) + ' | message.text = ' + str(message.text))
    mes = f'–ü—Ä–∏–≤–µ—Ç. –Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –¶–¢–ò–¢–ü.'
    bot.send_message(message.chat.id,mes, parse_mode='html')
    phone_btn = telebot.types.ReplyKeyboardMarkup(True, True)
    phone_btn.add(types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
    msg = bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç* üëá –Ω–∏–∂–µ', parse_mode='Markdown',
                           reply_markup=phone_btn)
    bot.register_next_step_handler(msg, start_4)
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------

def start_4(message):
    time.sleep(1)
    #print(message)
    if (message.contact is not None and message.from_user.id == message.contact.user_id):
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø ...', reply_markup=hideBoard)
        time.sleep(3)
        start_access(message, message.contact.phone_number)           
    else:
        bot.send_message(message.chat.id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üòà', reply_markup=hideBoard)
        
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
def start_access(message, phone):
    NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
    df1["Phone"] = df1["Phone"].apply(str)
    df1["Phone"] = df1["Phone"].apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups()))
    adf1 = df1["Phone"]
    adf1 = adf1.tolist()
    print(adf1)
    func=lambda phone: phone in adf1
    ph = lambda x: "+7" + ''.join(NUM_RE.match(x).groups())
    if not(func(ph(phone))):
        bot.send_message(message.chat.id,'–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ωüòà', reply_markup=hideBoard)
    else:
        start_5(message, message.contact.phone_number)
        
def start_5(message, phone):
    d1 = {'ID': [message.from_user.id], 'phone': [phone]}
    df = pd.DataFrame(d1)
    df.to_csv("/usr/src/app/dockerdata/ids.log", sep=";", mode='a', header=False)
    bot.send_message(message.chat.id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–±–æ—Ç–µ', reply_markup=hideBoard)
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# help
# function to handle the /contact command
@bot.message_handler(commands=['contact'], func=lambda message: message.from_user.id in userid_list())
def fn_main_contact(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("‚úã –û—Ç–º–µ–Ω–∞")
    markup.add(btn1)
    msg = bot.send_message(message.chat.id, "–£–º–µ—é –∏—Å–∫–∞—Ç—å –ø–æ —Ñ–∞–º–∏–ª–∏–∏, e-mail, –º–æ–±–∏–ª—å–Ω–æ–º—É –∏ —Ä–∞–±–æ—á–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É. –§–∞–º–∏–ª–∏—é –ø–∏—à–∏ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –∞ –ø–æ—á—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é üëá–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –∏–ª–∏ Ivanov@gp.ru, –ø—Ä–∞–≤–¥–∞ –ø–æ–∫–∞ –≤ –º–æ—ë–º —Ñ–∞–π–ª–∏–∫–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Ç–æ–ª—å–∫–æ (–ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä–æ–≤, –°–∏–¥–æ—Ä–æ–≤)", reply_markup=markup)
    bot.register_next_step_handler(msg, fn3, '', '', '')
        
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
def fn3(message, v_phone, v_firstname, v_lastname):
    if (message.text == "‚úã –û—Ç–º–µ–Ω–∞"):
        bot.send_message(message.chat.id, '–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ', parse_mode='html', reply_markup=hideBoard)
    elif (message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"):
        bot.send_contact(message.chat.id, phone_number=v_phone, first_name=v_firstname,last_name=v_lastname, reply_markup=hideBoard)
    elif (message.text == "–ù–∞–π—Ç–∏ –µ—â—ë"):
        fn_main_contact(message)
    elif (message.text == "–°–ø–∞—Å–∏–±–æ"):
        bot.send_message(message.chat.id, '–û–±—Ä–∞—â–∞–π—Å—è üòä', parse_mode='html', reply_markup=hideBoard)
    elif (message.text == "–î–∞"):
        fn_main_contact(message)
    else:
        fn_contact_find(message)
    #elif v_step == 2:
    #    fn_contact_find(message)
    #elif v_step == 1:
    #    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ï—Å–ª–∏ —á—Ç–æ, —É –º–µ–Ω—è –µ—Å—Ç—å /help', parse_mode='html')
        
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
def fn_contact_find(message):
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    btn2 = types.KeyboardButton("–ù–∞–π—Ç–∏ –µ—â—ë")
    btn3 = types.KeyboardButton("–°–ø–∞—Å–∏–±–æ")
    markup1.add(btn1, btn2, btn3)

    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn4 = types.KeyboardButton("–î–∞")
    btn5 = types.KeyboardButton("‚úã –û—Ç–º–µ–Ω–∞")
    markup2.add(btn4, btn5)

    f1 = ''
    flag = 0 # 1 - email 2 phone 3 Surname
    mess = message.text.strip().lower()

    messphone = mess.replace("+", "").replace("(", "").replace(")", "").replace("-", "").replace(" ", "")

    v_phone = '' 
    v_lastname = ''
    v_firstname = ''

    if "@" in mess:
        flag = 1
        for i in df1['Email']:
            if i.lower().strip() == mess:
                f1 = i
    elif messphone.isdigit():
        NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
        ph = lambda x: "+7" + ''.join(NUM_RE.match(x).groups())
        messphone = ph(messphone)
        flag = 2
        for i in df1['Phone'].apply(str).apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups())):
            if i == messphone:
                f1 = i
    elif mess.isalpha():
        flag = 3
        for i in df1['Surname']:
            if i.strip().lower() == mess:
                f1 = i
    if f1 == '' and flag == 0:
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–≥—É –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{message.text}</b>. –ó–∞–ø—Ä–æ—Å <b> {message.text}</b> –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞.üí¢ –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 1 and f1 != '':
        m = ''
        d = df1[df1['Email'] == f1]
        for index, row in d.iterrows():
            v_phone =  str(row['Phone']).strip()
            v_lastname = str(row['Surname']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>email</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    elif flag == 2 and f1 != '':
        NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
        m = ''
        d = df1[df1['Phone'].apply(str).apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups())) == f1]
        for index, row in d.iterrows():
            v_phone =  str(row['Phone']).strip()
            v_lastname = str(row['Surname']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>–Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    elif flag == 3 and f1 != '':
        m = ''
        d = df1[df1['Surname'] == f1]
        for index, row in d.iterrows():
            v_phone = str(row['Phone']).strip()
            v_lastname = str(row['Surname']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>—Ñ–∞–º–∏–ª–∏–∏</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    #–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É
    elif flag == 1 and f1 == '':
        m = df1[df1['Email'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>email</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 2 and f1 == '':
        m = df1[df1['Phone'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>–Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 3 and f1 == '':
        m = df1[df1['Surname'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>—Ñ–∞–º–∏–ª–∏–∏</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# website
# function to handle the /website command
@bot.message_handler(commands=['website'], func=lambda message: message.from_user.id in userid_list())
def fn_main_website(message):
    markup1 = types.InlineKeyboardMarkup()
    markup1.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ ctitp.ru", url="https://ctitp.ru/"))
    bot.send_message(message.chat.id, "–°–∞–π—Ç ctitp.ru", reply_markup=markup1)

    markup2 = types.InlineKeyboardMarkup()
    markup2.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ wiki", url="https://wiki.yandex.ru/"))
    bot.send_message(message.chat.id, "–í–∏–∫–∏", reply_markup=markup2)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# calendar
# function to handle the /calendar command
@bot.message_handler(commands=['calendar'], func=lambda message: message.from_user.id in userid_list())
def fn_main_calendar(message):
    from datetime import datetime
    import json
    from pytz import UTC # timezone
    import caldav
    from icalendar import Calendar, Event
    
    # CalDAV info
    url = "https://caldav.yandex.ru/calendars/polirov.d%40ctitp.ru/events-19645967/"
    userN = "polirov.d@ctitp.ru"
    passW = "qaqcdjpfdhaxlele"
    
    client = caldav.DAVClient(url=url, username=userN, password=passW)
    principal = client.principal()
    calendars = principal.calendars()
    
    if len(calendars) > 0:
        calendar = calendars[0]
        #print ("Using calendar", calendar)
        #results = calendar.events()
        #print(results)
        
        #print('------------')
        results = calendar.search(start=datetime(2022, 12, 13), end=datetime(2022, 12, 14),event=True)
        print(results)
        #print(datetime(2022, 12, 6))
        eventSummary = []
        eventDescription = []
        eventDateStart = []
        eventdateEnd = []
        eventTimeStart = []
        eventTimeEnd = []
        
        msg = '–£ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏: \n'
        
        for eventraw in results:
        
            event = Calendar.from_ical(eventraw._data)
            #print(event)
            for component in event.walk():
                if component.name == "VEVENT":
                    #print (component.get('summary'))
                    eventSummary.append(component.get('summary'))
                    
                    #print (component.get('description'))
                    eventDescription.append(component.get('description'))
                    
                    
                    startDate = component.get('dtstart')
                    #print (startDate.dt.strftime('%m/%d/%Y %H:%M'))
                    eventDateStart.append(startDate.dt.strftime('%m/%d/%Y'))
                    eventTimeStart.append(startDate.dt.strftime('%H:%M'))
                    
                    
                    endDate = component.get('dtend')
                    #print (endDate.dt.strftime('%m/%d/%Y %H:%M'))
                    eventdateEnd.append(endDate.dt.strftime('%m/%d/%Y'))
                    eventTimeEnd.append(endDate.dt.strftime('%H:%M'))
                    
                    
                    dateStamp = component.get('dtstamp')
                    #print (dateStamp.dt.strftime('%m/%d/%Y %H:%M'))
                    #print ('')
                    
                    msg = '<b>' + component.get('summary') + '</b>' + '\n'
                    msg = msg + startDate.dt.strftime('%H:%M') + ' - '
                    msg = msg + endDate.dt.strftime('%H:%M') + '\n'
                    msg = msg + component.get('description') + '\n'
            bot.send_message(message.chat.id, msg, parse_mode='html', reply_markup=hideBoard)

            #print(msg)
            time.sleep(1)
                    
        # Modify or change these values based on your CalDAV
        # Converting to JSON
        #data = [{ 'Events Summary':eventSummary[0], 'Event Description':eventDescription[0],'Event Start date':eventDateStart[0], 'Event End date':eventdateEnd[0], 'At:':eventTimeStart[0], 'Until':eventTimeEnd[0]}]
        
        #data_string = json.dumps(data)
        #print ('JSON:', data_string)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# other text
# function to handle the "other text"
@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    #todo –õ–æ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CEF
    print('1' + ' | ' + str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
    
    func=lambda x: x in userid_list()
    if not(func(message.from_user.id)):
        fn_main_start(message)
    else:
        msgs_start = ['/start']
        msgs_wifi  = ['/wifi']
        msgs_help  = ['/help']
        msgs_thx   = ['–°–ø–∞—Å–∏–±–æ!', '—Å–ø–∞—Å–∏–±–æ!', '–°–ø–∞—Å–∏–±–æ', '—Å–ø–∞—Å–∏–±–æ', '–°–ø—Å', 'c–ø—Å', 'thx', 'thanks', '—Å–ø–∞—Å–∏–±', '–ø–∞—Å–∏–±']
        msgs_hello = ['–ü—Ä–∏–≤–µ—Ç','–ø—Ä–∏–≤–µ—Ç','hi','hello','–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π']
        ###bot.send_message(346573500, '–ö–æ –º–Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' + str(message.chat.id), reply_markup=hideBoard)
        if message.text in msgs_thx:
            print('7' + ' | ' + str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
            rply_list = ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞', '–†–∞–¥ —Å—Ç–∞—Ä–∞—Ç—å—Å—è!üòè ', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ üòá']
            random_index = random.randint(0, len(rply_list) - 1)
            bot.send_message(message.chat.id, rply_list[random_index], reply_markup=hideBoard)
        elif message.text in msgs_hello:
            print('19' + ' | ' + str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=hideBoard)
        else:
            print('8' + ' | ' + str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
            f = open('/usr/src/app/dockerdata/message_else_text.log', 'a')
            f.write(message.text + '\n')
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å üò¢', reply_markup=hideBoard)
        
if __name__ == '__main__':
    print('0' + ' | ' + str('Start TG BOT') + ' | ' + str(' ') + ' | ' + str(' '))
    bot.infinity_polling()